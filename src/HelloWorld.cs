using AElf.Sdk.CSharp;
using Google.Protobuf.WellKnownTypes;
using System.Collections.Generic;

namespace AElf.Contracts.HelloWorld
{
    // Contract class must inherit the class generated by the proto file
    public class HelloWorld : HelloWorldContainer.HelloWorldBase
    {
        // Method to update the message value. 
        public override Empty Update(StringValue input)
        {
            // Set the message value in the contract state
            State.Message.Value = input.Value;
            // Emit an event to notify listeners about the something happened during the execution of this method
            Context.Fire(new UpdatedMessage
            {
                Value = input.Value
            });
            // Return an empty response
            return new Empty();
        }

        // Method to read the current message value
        public override StringValue Read(Empty input)
        {
            // Retrieve the value from the state
            var value = State.Message.Value;
            // Return value retrieved
            return new StringValue
            {
                Value = value
            };

        }

        private List<int> GenerateThreeRandomNumber()
        {
            var attributes = new List<int>();
            var randomBytes = State.RandomNumberContract.GetRandomBytes.Call(new Int64Value { Value = Context.CurrentHeight - 1 }.ToBytesValue());

            for (int i = 0; i < 3; i++)
            {
                int intValue = 0;
                int startIndex = i * 4; // Start index for every 4 bytes

                for (int m = 0; m < 4; m++) // Loop through 4 bytes
                {
                    intValue <<= 8; // Shift left by 8 bits
                    intValue |= randomBytes.ToString()[startIndex + m]; // OR with the current byte value
                }

                var attribute = (intValue % 6 + 5) % 6 + 1;
                attributes.Add(attribute);
            }

            return attributes;
        }

        public override Empty CreateRandomCharacter(Empty input)
        {
            State.RandomNumberContract.Value =
                    Context.GetContractAddressByName(SmartContractConstants.ConsensusContractSystemName);
            var attributes = GenerateThreeRandomNumber();
            var sum = attributes[0] + attributes[1] + attributes[2];
            var health = 30 * attributes[0] / sum;
            var strength = 30 * attributes[1] / sum;
            var speed = 30 - health - strength;
            var character = new StringValue
            {
                Value = $"Here is your character, HP is {health}, strength is {strength}, speed is {speed}"
            };
            State.Character.Value = character.Value;
            return new Empty();
        }
        public override StringValue GetRandomCharacter(Empty input)
        {
            var value = State.Character.Value;
            // Return value retrieved 
            return new StringValue
            {
                Value = value
            };
        }
    }
    
}